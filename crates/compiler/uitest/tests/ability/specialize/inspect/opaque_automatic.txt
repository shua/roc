# +emit:mono
app "test" provides [main] to "./platform"

Op := {}

main =
    dbg (@Op {})
    1

# -emit:mono
procedure Inspect.252 (Inspect.253):
    let Inspect.317 : Str = "<opaque>";
    let Inspect.316 : Str = CallByName Inspect.63 Inspect.253 Inspect.317;
    dec Inspect.317;
    ret Inspect.316;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.33 (Inspect.152):
    let Inspect.305 : Str = CallByName Inspect.5 Inspect.152;
    let Inspect.304 : Str = CallByName Inspect.64 Inspect.305;
    ret Inspect.304;

procedure Inspect.39 (Inspect.301):
    let Inspect.311 : Str = "";
    ret Inspect.311;

procedure Inspect.48 (Inspect.299):
    let Inspect.314 : {} = Struct {};
    let Inspect.313 : {} = CallByName Inspect.30 Inspect.314;
    ret Inspect.313;

procedure Inspect.5 (Inspect.150):
    let Inspect.312 : {} = CallByName Inspect.48 Inspect.150;
    let Inspect.309 : {} = Struct {};
    let Inspect.308 : Str = CallByName Inspect.39 Inspect.309;
    let Inspect.307 : Str = CallByName Inspect.252 Inspect.308;
    ret Inspect.307;

procedure Inspect.63 (Inspect.300, Inspect.296):
    let Inspect.319 : Str = CallByName Str.3 Inspect.300 Inspect.296;
    ret Inspect.319;

procedure Inspect.64 (Inspect.302):
    ret Inspect.302;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.300 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.300;

procedure Test.0 ():
    let Test.4 : {} = Struct {};
    let Test.2 : Str = CallByName Inspect.33 Test.4;
    dbg Test.2;
    dec Test.2;
    let Test.3 : I64 = 1i64;
    ret Test.3;
