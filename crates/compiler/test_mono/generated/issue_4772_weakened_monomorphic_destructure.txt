procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.23;

procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.24 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.24;

procedure Decode.24 (Decode.105):
    ret Decode.105;

procedure Decode.25 (Decode.106, Decode.125, Decode.108):
    let Decode.128 : {List U8, [C {}, C Str]} = CallByName Test.76 Decode.106 Decode.108;
    ret Decode.128;

procedure Decode.26 (Decode.109, Decode.110):
    let Decode.127 : {} = CallByName Test.15;
    let Decode.126 : {List U8, [C {}, C Str]} = CallByName Decode.25 Decode.109 Decode.127 Decode.110;
    ret Decode.126;

procedure Str.12 (#Attr.2):
    let Str.309 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.309;

procedure Str.27 (Str.110):
    let Str.300 : [C {}, C I64] = CallByName Str.76 Str.110;
    ret Str.300;

procedure Str.42 (#Attr.2):
    let Str.308 : {I64, U8} = lowlevel StrToNum #Attr.2;
    ret Str.308;

procedure Str.76 (Str.217):
    let Str.218 : {I64, U8} = CallByName Str.42 Str.217;
    let Str.306 : U8 = StructAtIndex 1 Str.218;
    let Str.307 : U8 = 0i64;
    let Str.303 : Int1 = CallByName Bool.11 Str.306 Str.307;
    if Str.303 then
        let Str.305 : I64 = StructAtIndex 0 Str.218;
        let Str.304 : [C {}, C I64] = TagId(1) Str.305;
        ret Str.304;
    else
        let Str.302 : {} = Struct {};
        let Str.301 : [C {}, C I64] = TagId(0) Str.302;
        ret Str.301;

procedure Test.103 ():
    let Test.101 : [C Str, C {List U8, I64}] = CallByName Test.19;
    let Test.115 : List U8 = Array [];
    let Test.116 : I64 = -1234i64;
    let Test.114 : {List U8, I64} = Struct {Test.115, Test.116};
    let Test.113 : [C Str, C {List U8, I64}] = TagId(1) Test.114;
    let Test.112 : Int1 = CallByName Bool.11 Test.101 Test.113;
    dec Test.114;
    expect Test.112;
    dec Test.101;
    let Test.111 : {} = Struct {};
    ret Test.111;

procedure Test.15 ():
    let Test.137 : {} = Struct {};
    let Test.136 : {} = CallByName Decode.24 Test.137;
    ret Test.136;

procedure Test.19 ():
    let Test.135 : Str = "-1234";
    let Test.133 : List U8 = CallByName Str.12 Test.135;
    let Test.134 : {} = Struct {};
    let Test.132 : {List U8, [C {}, C Str]} = CallByName Decode.26 Test.133 Test.134;
    dec Test.133;
    let Test.93 : List U8 = StructAtIndex 0 Test.132;
    let Test.92 : [C {}, C Str] = StructAtIndex 1 Test.132;
    let Test.129 : U8 = 1i64;
    let Test.130 : U8 = GetTagId Test.92;
    let Test.131 : Int1 = lowlevel Eq Test.129 Test.130;
    if Test.131 then
        let Test.94 : Str = UnionAtIndex (Id 1) (Index 0) Test.92;
        let Test.117 : [C {}, C I64] = CallByName Str.27 Test.94;
        dec Test.94;
        let Test.123 : U8 = 1i64;
        let Test.124 : U8 = GetTagId Test.117;
        let Test.125 : Int1 = lowlevel Eq Test.123 Test.124;
        if Test.125 then
            let Test.95 : I64 = UnionAtIndex (Id 1) (Index 0) Test.117;
            let Test.119 : {List U8, I64} = Struct {Test.93, Test.95};
            let Test.118 : [C Str, C {List U8, I64}] = TagId(1) Test.119;
            ret Test.118;
        else
            dec Test.93;
            let Test.122 : Str = "not a number";
            let Test.120 : [C Str, C {List U8, I64}] = TagId(0) Test.122;
            ret Test.120;
    else
        dec Test.93;
        dec Test.92;
        let Test.128 : Str = "not a number";
        let Test.126 : [C Str, C {List U8, I64}] = TagId(0) Test.128;
        ret Test.126;

procedure Test.76 (Test.77, Test.138):
    let Test.141 : {} = Struct {};
    let Test.140 : [C {}, C Str] = TagId(0) Test.141;
    inc Test.77;
    let Test.139 : {List U8, [C {}, C Str]} = Struct {Test.77, Test.140};
    ret Test.139;
